pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node20'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/ndsang001/Secure_To_Do_App.git'
            }
        }

        stage('SAST - Semgrep (Backend + Frontend)') {
            steps {
                script {
                    sh '''
                    export PATH=$PATH:/var/lib/jenkins/semgrep_env/bin
                    /var/lib/jenkins/semgrep_env/bin/semgrep --config=auto --json --include 'backend/**/*.py' > semgrep_backend.json
                    /var/lib/jenkins/semgrep_env/bin/semgrep --config=auto --json --include 'frontend/**/*.js' > semgrep_frontend.json
                    '''
                }
            }
        }

        stage('Install Backend Dependencies & SBOM') {
            steps {
                dir('backend') {
                    sh '''
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install --upgrade pip
                    pip install -r requirements.txt cyclonedx-bom
                    cyclonedx-py requirements -i requirements.txt -o ../sbom_backend.json
                    '''
                }
            }
        }


        stage('Install Frontend Dependencies & SBOM') {
            steps {
                dir('frontend') {
                    sh '''
                    npm install
                    cyclonedx-npm --output-file ../sbom_frontend.json --output-reproducible
                    '''
                }
            }
        }

        stage('SCA - Snyk (Backend + Frontend)') {
            steps {
                withCredentials([string(credentialsId: 'snyk-token-id', variable: 'SNYK_TOKEN')]) {
                    script {
                        sh '''
                        cd backend
                        snyk auth ${SNYK_TOKEN}
                        snyk test --org=ndsang001 || true
                        cd ../frontend
                        snyk test --org=ndsang001 || true
                        '''
                    }
                }
            }
        }

        stage('File System Scan - Trivy') {
            steps {
                sh "trivy fs --format json --output trivyfs.json ."
            }
        }

        stage('Docker Build & Push (Backend)') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh "docker build -t secure-todo-backend ./backend"
                        sh "docker tag secure-todo-backend sangnguyen2001/secure-todo-backend:latest"
                        sh "docker push sangnguyen2001/secure-todo-backend:latest"
                    }
                }
            }
        }

        stage('Container Scan - Trivy') {
            steps {
                sh '''
                trivy image --format template --template "@/usr/bin/html.tpl" --output trivyimage.html sangnguyen2001/secure-todo-backend:latest
                '''
            }
        }

        stage('Deploy Backend Container') {
            steps {
                sh '''
                docker stop secure-backend || true
                docker rm secure-backend || true
                docker run -d --name secure-backend -p 8000:8000 sangnguyen2001/secure-todo-backend:latest
                '''
            }
        }

        stage('Start Frontend Dev Server') {
            steps {
                dir('frontend') {
                    sh '''
                    nohup npm run dev -- --host --port 5173 > ../frontend.log 2>&1 &
                    '''
                }
            }
        }

        stage('DAST - OWASP ZAP (Frontend + Backend)') {
            steps {
                sh '''
                chmod 777 $(pwd)
                docker stop owasp || true
                docker rm owasp || true
                docker run --rm -v $(pwd):/zap/wrk/:rw --name owasp -dt zaproxy/zap-stable /bin/bash
                docker exec owasp zap-baseline.py -t http://192.168.117.129:8000/ -I -j --auto -r DAST_Backend_Report.html
                docker exec owasp zap-baseline.py -t http://192.168.117.129:5173/ -I -j --auto -r DAST_Frontend_Report.html
                '''
            }
        }

        stage('Save Artifacts') {
            steps {
                archiveArtifacts artifacts: '**/*.json, **/*.html', fingerprint: true
            }
        }
    }
}
